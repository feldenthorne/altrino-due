/** \file system_functions.cpp
 *  This file contains the class for system functions for the CPP version of the 
 *  FreeRTOS example.
 */

// Include the header
#include "system_functions.h"

// Defines for the system class
/** \brief This constructor really doesn't do much but give access to the class methods.
 */
system_functions::system_functions(void)
{
	// Initialize the object variables and pointers
	g_ul_ms_ticks = 0;
	g_b_led0_active = true;
	g_b_led1_active = true;
}

/** \brief Initialize the system clock with default ASF parameters
 */
void system_functions::init_clock(void)
{
	sysclk_init();
}

/** \brief Initialize the board with default ASF parameters.
 */
void system_functions::init_board(void)
{
	board_init();
}

/** \brief Configure UART console
 *  Uses options specified in include/configure_console.h
 */
void system_functions::config_console(void)
{
	usart_serial_options_t uart_serial_options =
	{
		.baudrate   = CONF_UART_BAUDRATE,
		.charlength = CONF_UART_CHAR_LENGTH,
		.paritytype = CONF_UART_PARITY,
		.stopbits   = CONF_UART_STOP_BIT
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
}

/** \brief Wait for the given number of milliseconds (using the g_ul_ms_ticks
 *  generated by the SAM's microcontrollers's system tick).
 *
 *  \param ul_dly_ticks  Delay to wait for, in milliseconds.
 */
void system_functions::mdelay(uint32_t ul_dly_ticks)
{
	uint32_t ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
}